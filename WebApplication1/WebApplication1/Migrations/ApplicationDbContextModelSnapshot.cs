// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WasselniAPI.Data;

#nullable disable

namespace WasselniAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WasselniAPI.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId")
                        .IsUnique();

                    b.HasIndex("PlateNumber")
                        .IsUnique()
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WasselniAPI.Models.DriverLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<double?>("Heading")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<double>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<double?>("Speed")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("DriverId", "Timestamp");

                    b.ToTable("DriverLocations");
                });

            modelBuilder.Entity("WasselniAPI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Data")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RideId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("RideId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WasselniAPI.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("RideId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WasselniAPI.Models.Pricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseFare")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<TimeSpan>("EveningPeakEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EveningPeakStart")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("MinimumFare")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan>("MorningPeakEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("MorningPeakStart")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PeakHourMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<decimal>("PerKmRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PerMinuteRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.ToTable("Pricings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseFare = 0.50m,
                            CreatedAt = new DateTime(2025, 5, 23, 1, 28, 31, 153, DateTimeKind.Utc).AddTicks(4233),
                            EveningPeakEnd = new TimeSpan(0, 19, 0, 0, 0),
                            EveningPeakStart = new TimeSpan(0, 15, 0, 0, 0),
                            IsActive = true,
                            MinimumFare = 1.10m,
                            MorningPeakEnd = new TimeSpan(0, 9, 0, 0, 0),
                            MorningPeakStart = new TimeSpan(0, 7, 0, 0, 0),
                            Name = "Jordan Standard Pricing",
                            PeakHourMultiplier = 1.20m,
                            PerKmRate = 0.28m,
                            PerMinuteRate = 0.05m
                        });
                });

            modelBuilder.Entity("WasselniAPI.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("RatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("RatingGivenByUserId")
                        .HasColumnType("int");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasAnnotation("Range", new[] { 1, 5 });

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("RatingGivenByUserId");

                    b.HasIndex("RideId", "RatedUserId", "RatingGivenByUserId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WasselniAPI.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualFare")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double?>("DistanceKm")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("DropoffAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("DropoffLat")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<double>("DropoffLng")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedFare")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PickupAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("PickupLat")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<double>("PickupLng")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("Status");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("WasselniAPI.Models.RideRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("RideId");

                    b.HasIndex("DriverId", "ExpiresAt");

                    b.ToTable("RideRequests");
                });

            modelBuilder.Entity("WasselniAPI.Models.RideTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Heading")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<double>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<double?>("Speed")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("RideId", "Timestamp");

                    b.ToTable("RideTrackings");
                });

            modelBuilder.Entity("WasselniAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("CurrentLat")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<double?>("CurrentLng")
                        .HasPrecision(10, 7)
                        .HasColumnType("float(10)");

                    b.Property<string>("DriverStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)");

                    b.Property<int?>("TotalTrips")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Amman, Jordan",
                            CreatedAt = new DateTime(2025, 5, 23, 1, 28, 31, 153, DateTimeKind.Utc).AddTicks(4680),
                            Email = "admin@wassel.jo",
                            FullName = "Wassel Admin",
                            IsLoggedIn = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ3Rz0J5w5Q9v5K8o8O7c2Q8w5Q9v5K8o8O7c2Q8w5Q9v5K8o8O7c2Q8w5Q9v5K8o8O7c2Q8w5Q9v5K8",
                            PhoneNumber = "962777123456",
                            UserType = "Customer"
                        });
                });

            modelBuilder.Entity("WasselniAPI.Models.Car", b =>
                {
                    b.HasOne("WasselniAPI.Models.User", "Driver")
                        .WithOne("Car")
                        .HasForeignKey("WasselniAPI.Models.Car", "DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("WasselniAPI.Models.DriverLocation", b =>
                {
                    b.HasOne("WasselniAPI.Models.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("WasselniAPI.Models.Notification", b =>
                {
                    b.HasOne("WasselniAPI.Models.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WasselniAPI.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WasselniAPI.Models.Payment", b =>
                {
                    b.HasOne("WasselniAPI.Models.Ride", "Ride")
                        .WithOne("Payment")
                        .HasForeignKey("WasselniAPI.Models.Payment", "RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("WasselniAPI.Models.Rating", b =>
                {
                    b.HasOne("WasselniAPI.Models.User", "RatedUser")
                        .WithMany("ReceivedRatings")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WasselniAPI.Models.User", "RatingGivenByUser")
                        .WithMany("GivenRatings")
                        .HasForeignKey("RatingGivenByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WasselniAPI.Models.Ride", "Ride")
                        .WithMany("Ratings")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatedUser");

                    b.Navigation("RatingGivenByUser");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("WasselniAPI.Models.Ride", b =>
                {
                    b.HasOne("WasselniAPI.Models.User", "Customer")
                        .WithMany("CustomerRides")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WasselniAPI.Models.User", "Driver")
                        .WithMany("DriverRides")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("WasselniAPI.Models.RideRequest", b =>
                {
                    b.HasOne("WasselniAPI.Models.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WasselniAPI.Models.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("WasselniAPI.Models.RideTracking", b =>
                {
                    b.HasOne("WasselniAPI.Models.Ride", "Ride")
                        .WithMany("TrackingPoints")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("WasselniAPI.Models.Ride", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Ratings");

                    b.Navigation("TrackingPoints");
                });

            modelBuilder.Entity("WasselniAPI.Models.User", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("CustomerRides");

                    b.Navigation("DriverRides");

                    b.Navigation("GivenRatings");

                    b.Navigation("Notifications");

                    b.Navigation("ReceivedRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
